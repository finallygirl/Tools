1. 新建App项目(使用XCode)
    Product Name 项目名称
    Organization Identifier唯一标识公司网站倒着写
    Bundle Identifier 应用唯一标识, 中文会转成-, 开头不能是数字, 会被转成-, 应用安装时会识别唯一标识, 如果相同就会覆盖安装.
2. Main.storyboard
    软件调试面板, 可在右侧Size中修改尺寸. 保证模拟器大小和页面Size大小一致
    调整控件大小, 选中控件右侧调整x,y,width,height
    选中控件右侧keyboard type 选择number part, 呼出来的键盘就是纯数字键盘. 快捷键command + k, Hardware -> keyboard -> connect hardware keyboard
3. UILabel 文本标签
4. UIButton 按钮
5. UITextField 文本输入框
6. UIView, 是所有控件的父类, 所有控件都是继承自UIView, 本身是一个容器. 容器中的控件被称为子控件.
   作用: 展示数据, 采集数据
7. UIViewController
   作用: 生命周期, 控件的生成和销毁, 控件的操作, 控件的事件, 管理UIView的一切
   shift + command + h, 在模拟器中快速回到桌面.
   shift + command + h + h, 清理内存界面
   每个界面首先创建一个 UIViewController -> UIView -> 子控件
   控制器是用来管理View的
   点击或选中View Controller右侧Class是控制他的类
   在ViewController.m文件中, 创建类延展(类扩展), 在storyboard文件中, 点击按钮, 按住control键拖线到类扩展中, 选择action. 会生成1个方法声明和方法实现. 在实现中编写逻辑代码.
   自己写的方法不能被拖线, 因为返回值类型不是IBAction, 改成IBAction就可以拖线了.
   拖线既可以拖Action也可以拖Outlet, Outlet为一个控件的属性.
   获取label文本方法self.label名.stringValue.
8. 键盘召回方法:
   谁叫出的键盘, 谁就是第一响应者, 让第一响应者辞职, 就可以把键盘叫回去.
   [self.txt1 resignFirstResponder];
   [self.txt2 resignFirstResponder];
   如果文本框过多, 你无法分清到底是谁叫出来的键盘, 所以需要采用如下做法
   self是控制器本身
   self.view就表示是当前控制器所管理的那个view(每一个控制器都会管理一个view)
   这时把键盘叫回去的思路就是: 
   让当前控制器所管理的view停止编辑, 这样的话, 凡是这个view中的子控件叫出的键盘就都会回去了.
   [self.view endEditing:YES];
9. 向storyboard中添加控件: +号拖, storyboard就是描述软件界面的, 可以直接拖控件进去

10. UIViewController和UIView的关系:
    1). UIView是所有控件的祖宗类
    2). UIView只负责展示数据, 采集数据.
    3). UIViewController是控制器, 控制器管理UIView的创建销毁一系列过程, 同时UIView本身的所有事件以及子控件的事件都是交给UIViewController来管理的
    4). 大部分代码都写在UIViewController中
11. IBOutlet(属性)/IBAction(方法, 返回值void) 可拖线类型
12. 如何监听控件的事件, 拖线的方式 -> IBAction
13. 容器添加控件, 被称为子控件, 容器为父控件
14. 退出键盘: 辞去第一响应者, 当前view停止编辑
15. 程序运行过程
    Deployment Target: 最低支持的iOS版本, 最低兼容系统版本
    Devices: 是什么开发
    Main Interface: 入口storyboard
    Landscape Left/Right 是否支持横屏
    横向小箭头指向默认运行的界面, 通过右侧is Initial View Controller, 修改是否为初始化控制器.
    Main Interface -> is Initial View Controller -> UIViewController -> UIView -> 子控件
    模拟器放大缩小, command 1, command 2, command 3
16. 拖线后属性或方法被删除, 报错:　this class is not key value coding-compliant for the key xxx.
    解决: 把拖线删了, 或添加属性或方法.
17. 引用控件的属性, 事件处理方法都写在.m文件的类扩展, 保证封装性. 拖线到.m文件的类扩展中
18. 按钮的基本使用: 
    状态: default highlight
    图片素材可直接拖拽到Assets.xcassets中使用
    按钮title修改文本内容
    background选择图片
    text color改变文本颜色
    state config状态 -> highlight 修改高亮时的状态
    type -> custom 默认为system样式
    按住optiona键可以快速复制
    拖线时选sender带参数, None不带参数
    如何让按钮移动?
    获取按钮的x/y坐标的值, 让x/y的值递减或递增, 然后再把新的值赋值给按钮的x/y
    按钮拖线成属性, 获取按钮的坐标
    获取按钮原始的frame值(这个frame中就包含了按钮的大小和坐标)
    CGRect originFrame = self.btn.frame;
    修改Frame
    originFrame.origin.y -= 10;
    重新把frame赋值给按钮
    self.btn.frame = originFrame;
    注意: 不能直接修改self.btn.frame值, 会报错. 当修改结构体里面的属性值时, 必须先取出来, 修改, 再赋值回去.
    原理: OC压根就没有点语法, 这些都是编译器实现的, 这句话转换成oc语法就是表达式, 我们无法对表达式赋值.
    viewController右侧use auto layout 去掉勾选 取消自动布局
    CGRect originFrame = self.btn.frame;
    originFrame.size = CGSizeMake(originFrame.size.width + 10, originFrame.size.height + 10);
    self.btn.frame = originFrame;
    方法功能相同或类似, 可以合并事件, 将几个按钮同时拖线到一个方法上
    为每个按钮设置不同的tag值, 然后在这个方法中就可以根据sender.tag来判断用户当前点击的是哪个按钮
    掌握frame(可以修改位置和大小), center(只能修改位置), bounds(只能修改大小), transform(旋转)
    通过center移动位置
    center表示的事控件中心点的坐标
    frame获取x和y表示的事原始左上角的坐标
    center是CGPoint类型
    通过bounds修改大小
    bounds虽然也是CGRect类型, 但是x, y的值始终是0, 所以只能通过bounds修改大小
19. 动画效果
    将赋值语句放到动画效果中执行
    通过动画的方式来执行
    [头尾式]
    1. 开启动画
    [UIView beginAnimations:nil context: nil];
    2. 设置动画执行时间
    [UIView setAnimationsDuration:3];
    ------> 这里放置执行动画效果的代码, 例如放大缩小重新赋值的frame
    3. 提交动画
    [UIView commitAnimations];
    通过block方式来实现动画
    [UIView animateWithDuration:1 animations:^{
        执行动画的代码
    }];
20. 坐标系: center是控件的中心点, frame是控件的左上角, (0, 0)是View的左上角.
21. 通过代码自己写控件
    viewDidLoad是控制器View加载好后执行的方法
    当要显示一个界面的时候, 首先创建这个界面对应的控制器
    控制器创建好以后, 接着创建控制器所管理的那个view, 当这个view加载完毕以后就开始执行下面的方法了.
    所以只要viewDidLoad方法被执行了, 就表示控制器所管理的view创建好了
    -(void)viewDidLoad{
        [super viewDidLoad];
        //动态创建我们自己的按钮
        // 1. 创建按钮(UIButton)
        UIButton *button = [UIButton new];
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        // 2. 设置按钮上显示的文字
        // 设置默认状态下的显示文字
        [button setTitle:@"点我吧" forState:UIControlStateNormal];
        // 设置高亮状态下的显示文字
        [button setTitle:@"摸我干啥" forState:UIControlStateHighlighted];
        // 设置不同状态下的文本颜色
        [button setTitleColor: [UIColor redColor] forState:UIControlStateNormal];
        [button setTitleColor: [UIColor blueColor] forState:UIControlStateHighlighted];
        // 加载图片
        UIImage *imgNormal = [UIImage imageNamed:@"btn_01"];
        UIImage *imgHighlighted = [UIImage imageNamed:@"btn_02"];
        // 设置默认状态下的背景图片
        [button setBackgroundImage:imgNormal forState:UIControlStateNormal];
        // 设置高亮状态下的背景图片
        [button setBackgroundImage:imgHighlighted forState:UIControlStateHighlighted];
        // 设置按钮的frame
        button.frame = CGRectMake(50, 100, 100, 100);

        //通过代码为按钮注册一个单击事件(当按钮单击时, 要执行某个对象的某个方法)
        //这就是如何为动态创建的按钮注册单击事件
        [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];

        
        //把动态创建的按钮加到控制器所管理的那个view中
        [self.view addSubview:button];
    }
    -(void)buttonClick{}
    在日常开发中, 不确定按钮等控件的位置, 或者需要动态的加载按钮等控件, 所以需要通过代码来创建控件
22. 模拟器安装路径:
    /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs
    模拟器代表不同的iPhone手机机型, iOS代表手机内的操作系统版本
23. 调整控制器size -> iPhone4.7
    option键快速复制
    placeholder  -->  提示关键字
    勾选Secure text Entry 密码框掩码
    keyboard Type  -->  Number Pad, 仅输入数字
    clear button  -->  is always visible 显示清除按钮
    -(IBAction)login{
        NSString *qq = self.txtQQ.stringValue;
        NSString *qwd = self.Password.stringValue;
        [self.view endEditing:YES];
    }
24. 项目结构
    AppDelegate.h
    AppDelegate.m     --->   应用程序的代理
    ViewController.h
    ViewController.h  --->   控制器类, 可以自己创建
    Main.storyboard   --->   描述软件界面的文件, 可以直接拖控件进去, 属性中有一个Class, 指向的是控制器类
    LaunchScreen.xib  --->   程序启动时加载的图片或动画
    Assets.xcassets   --->   图片素材文件夹
    当前项目目录可以存放数据文件(plist)  ---> iOS在Supporting Files里
25. 类前缀
    类前缀用来标识类型, 
    选中当前项目, 右侧有一个Class Prefix, 用来编辑类前缀的地方
26. transform
    a. 平移:
    1. 获取原始的结构体值(获取原来的结构体的值, 是为了基于原来的值进行修改)
    CGAffineTransform transForm = self.btnIcon.transform;
    2. 修改结构体值
    //x水平, y垂直, 起始值是0, y负的向上, y正的向下. 始终基于原点(0)来计算
    self.btnIcon.transform = CGAffineTransformMakeTranslation(0, -50); 
    // 上面这句话的意思是: 告诉控件, 平移到距离原始位置-50的位置.
    //基于一个旧的值, 再进行平移. 基于现有的一个值, 再进行平移
    self.btnIcon.transform = CGAffineTransformTranslate(self.btnIcon.transform, 0, -50); 
    3. 重新赋值
    基于原来的值进行修改, 需要获取原来的结构体值, 如果不基于, 就不需要获取
    b. 缩放:
    self.btnIcon.transform = CGAffineTransformMakeScale(1.5, 1.5); 放大1.5倍
    self.btnIcon.transform = CGAffineTransformScale(self.btnIcon.transform, 1.5, 1.5); 
    c. 旋转:
    self.btnIcon.transform = CGAffineTransformMakeRotation(M_PI_4);  //弧度45度=M_PI_4, 正顺时针, 负逆时针
    self.btnIcon.transform = CGAffineTransformRotae(self.btnIcon.transform, M_PI_4); 
    d. 回到原始值:
    // 让控件回到原始的位置
    view.transform = CGAffineTransformIdentity;
27. 控件的属性:
    1. superview 父控件
    2. subviews 子控件们
    获取当前控制器所管理的view下的所有子控件
    subviews表示获取某个控件的所有子控件
    for (UIView *view in self.view.subviews){
        view.backgroundColor = [UIColor redColor];
    }
    self.btn.superview.backgroundColor = [UIColor redColor];
    // 根据tag来获取某个控件 -(UIView *)viewWithTag:(NSInteger)tag;
    UITextField *txt = (UITextField *)[self.view viewWithTag:1000];
    txt.stringValue = @"txt";
    //添加控件
    -(void)addSubview:(UIView *)view;
    //把自身从父控件中移除
    -(void)removeFromSubview; 只能自己调用, 不能被别人调用
    while (self.view.subviews.firstObject){
        [self.view.subviews.firstObject removeFromSubview];
    }
28. 新建plist文件 --> command + n  --> other  -->  property list
29. 图片浏览器
    @property (nonatomic, strong) NSArray *pic;
    // 重写pic属性的get方法  -->  懒加载数据
    - (NSArray *)pic{
        if (_pic == nil){
            // 写代码加载pic.plist文件中的数据到_pic
            // 1. 获取pic.plist文件的路径
            // 获取pic.plist文件的路径赋值给path变量
            // [NSBundle mainBundle]表示获取这个app安装到手机上时的根目录
            // 然后在app的安装的根目录下搜索pic.plist文件的路径
            NSString *path = [[NSBundle mainBundle] pathForResource:@"pic.plist" ofType:nil];
            //读取文件
            NSArray *array = [NSArray arrayWithContentsOfFile:path];
            _pic = array;
        }
        return _pic;
    }
    // 自己写一个索引, 来控制当前显示的是第几张图片
    // 这个属性一开始没有赋值就是0
    @property (nonatomic, assign) int index;
    // 下一张图片
    -(IBAction)next{
        // 1. 让索引++
        self.index++;
        // 2. 从数组中获取当前这张图片的数据
        NSDictionary *dict = self.pic[self.index];
        // 3. 把获取到的数据设置给界面上的控件
        self.lblIndex.stringValue = [NSString stringWithFormat:@"%d/%ld", self.index, self.pic.count];
        // 通过Image属性来设置图片框里面的图片
        self.imgViewIcon.image = [UIImage imageNamed:dict[@"icon"]];
        // 设置这张图片的标题
        self.lblTitle.stringValue = dict[@"title"];
        // 设置"下一张"按钮是否可点击
        // self.btnNext.enabled = (self.index != (self.pic.count - 1));
        if (self.index == (self.pic.count - 1)) {
            self.btnNext.enabled = NO;
        } else {
            self.btnNext.enabled = YES;
        }
        self.btnPre.enabled = (self.index != 0);
        // 控制上一张与下一张按钮是否可用
    }
    @property (nonatomic, weak) IBOutlet UILabel *lblIndex;
    @property (nonatomic, weak) IBOutlet UIImageView *imgViewIcon;
    @property (nonatomic, weak) IBOutlet UILabel *lblTitle;
    @property (nonatomic, weak) IBOutlet UIButton *btnNext;
    可以将相同的代码抽离出来变成一个setData函数
    // 设置控件数据
    [self setDate];
    //控制器view加载完毕以后执行的方法viewDidLoad
    原始的index为0, 可以直接调用setData方法
    self.index = -1;
    [self next];
30. plist文件本质是xml文件, 使用plist后缀可以用xcode打开, 显示的界面和xml编辑不同, OC独有.
31. UIImageView 帧动画
    1. @property(nonatomic, copy) NSArray *animationImages;
    需要播放的序列帧图片数组(里面都是UIImage对象, 会按顺序显示里面的图片)
    2. @property(nonatomic) NSTimeInterval animationDuration;
    帧动画的持续时间
    3. @property(nonatomic) NSInteger animationRepeatCount;
    真动画的执行次数(默认是无限循环)
    4. -(void)startAnimating;
    开始执行帧动画
    5. -(void)stopAnimating;
    停止执行帧动画
    6. -(BOOL)isAnimating;
    是否正在执行帧动画
    后缀名+M表示可变的
    //0. 动态加载图片到一个NSArray中
    NSMutableArray *arrayM = [NSMutableArray array];
    for (int i = 0; i <= 80; i++) {
        //拼接图片名称
        NSString *imgName = [NSString stringWithFormat:@"drink_%02d.jpg", i];
        //根据图片名称加载图片
        UIImage *imgCat = [UIImage imageNamed:imgName];
        // 把图片加载到数组中
        [arrayM addObject:imgCat];
    }
    //1. 设置UIImageView(图片框)的animationImages属性, 这个属性中包含的就是所有那些要执行动画的图片
    self.imgViewCat.animationImages = arrayM;
    //2. 设置动画持续时间
    self.imgViewCat.animationDuration = 3;
    //3. 设置动画是否需要重复播放
    self.imgViewCat.animationRepeatCount = 1;
    //4. 开启动画
    [self.imgViewCat startAnimating];
32. 代码重用: 继承, 引入模块, 调用方法, 都是代码重用的体现, 代码重复写, 复制粘贴不是.
    封装如上方法复用
    //执行动画的方法
    - (void)startAnimating:(int)count picName:(NSString *)picName{
        // 如果当前图片框正在执行动画, 那么直接return, 什么都不做(没有开启一个新动画)
        if (self.imgViewCat.isAnimating){
            return;
        }
        NSMutableArray *arrayM = [NSMutableArray array];
        for (int i = 0; i <= count; i++) {
            NSString *imgName = [NSString stringWithFormat:@"%@_%02d.jpg", picName, i];
            // 通过imageNamed: 这种方式加载图片, 加载好的图片会一直保存在内存中, 不会释放, 
            // 这样下次如果再使用同样的图片的时候就不需要再重新加载了, 因为内存里面已经有了. 
            // 缺点就是: 如果加载了大量的图片, 那么这些图片会一直保留在内存中, 导致应用程序占用内存过大 (这就叫缓存)
            // 使用这种方式加载图片, 加载起来的图片即便没有强类型指针引用野不会销毁(会被缓存)
            // UIImage *imgCat = [UIImage imageNamed:imgName];
            // 使用下面这种方式加载的图片, 只要没有强类型指针引用就会被销毁了
            // 解决: 换一种加载图片的方式, 不要使用缓存
            // 获取图片的完整路径
            NSString *path = [[NSBundle mainBundle] pathForResource:imgName ofType:nil];
            // 这里的参数不能再传递图片名称了, 这里需要传递一个图片的完整路径
            UIImage *imgCat = [UIImage imageWithContentsOfFile:path];
            [arrayM addObject:imgCat];
        }
        self.imgViewCat.animationImages = arrayM;
        self.imgViewCat.animationDuration = self.imgViewCat.animationImages.count * 0.1;
        self.imgViewCat.animationRepeatCount = 1;
        [self.imgViewCat startAnimating];
        // 清空图片集合
        // 这样写的问题是, 当动画启动以后, 动画还没开始执行, 就已经让图片集合清空了, 也就是说
        // self.imgViewCat.animationImages里面已经没有图片了, 所以动画就不执行了.
        // self.imgViewCat.animationImages = nil;
        // 需要延迟一段时间执行, 当动画执行完毕以后再清空这些图片
        // [self.imgViewCat setAnimationsImages:nil];
        // 设置图片框在调用setAnimationsImages:nil方法的时候延迟执行
        [self.imgViewCat performSelector:@selector(setAnimationsImages:) withObject:nil affterDelay:self.imgViewCat.animationImages.count * 0.1];
        // 此方法只是清空集合, 如果图片缓存了, 图片还是在的
    }
    要点: 如何做动画, 以及内存处理
33. UIButton和UIImageView异同点
    相同点: 都能显示图片
    不同点: UIButton默认情况就能箭筒点击事件, 而UIImageView默认情况下不能
    UIButton继承自UIControl, 可以处理很多事件
    UIButton可以在不同状态下显示不同的图片
    UIButton既能显示文字, 又能显示图片(能显示2张图片, backgroundImage和Image)
    如何选择:
    UIButton: 需要显示图片, 点击图片后需要做一些特定的操作
    UIImageView: 仅仅需要显示图片, 点击图片后不需要做任何事情
34. 方法前可以加文档注释, 这样在调用方法时会显示出来. xcode可以按照插件, 来快速创建文档注释, 提示Image图片名字等.
35. 总结:
    更换UIImageView图片: self.imgViewIcon.image = [UIImage ImageNamed:@"xxx"];
    更换UILabel的文字, stringValue,
    在storyboard中设置UILabel的自动换行和文字居中, 根据Lines属性, 设置0表示全部显示, Alignment属性
    属性懒加载: 重写属性的get方法
    设置图片显示方式, 右侧Mode属性 --> ContentMode
36. 